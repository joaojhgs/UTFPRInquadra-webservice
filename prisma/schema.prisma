// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "@generated"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    String                         @id @default(uuid()) @db.Uuid
  name                  String
  ra                    Int
  password              String                         @db.VarChar(255)
  email                 String                         @db.VarChar(255)
  campi                 String
  role                  String                         @default("User") @db.VarChar(255)
  reservations          ReservationHasUsers[]
  requestedReservations ReservationHasRequestedUsers[]
  managerOfReservations Reservation[]
}

model Sport {
  id          String           @id @default(uuid()) @db.Uuid
  name        String
  maxAmount   String?
  courts      CourtHasSports[]
  reservation Reservation[]
}

model Court {
  id              String            @id @default(uuid()) @db.Uuid
  name            String
  sports          CourtHasSports[]
  reservation     Reservation[]
  unavailableTime unavailableTime[]
}

model Reservation {
  id            String    @id @default(uuid()) @db.Uuid
  startDateTime DateTime? @db.Timestamptz(6)
  endDateTime   DateTime? @db.Timestamptz(6)
  created_at             DateTime                       @default(now()) @db.Timestamptz(6)
  manager_id             String                         @db.Uuid
  manager                User                           @relation(fields: [manager_id], references: [id])
  participants           ReservationHasUsers[]
  requested_participants ReservationHasRequestedUsers[]
  max_participants       Int
  sport                  Sport                          @relation(fields: [sportId], references: [id])
  sportId                String                         @db.Uuid
  court                  Court                          @relation(fields: [courtId], references: [id])
  courtId                String                         @db.Uuid
  description            String                         @db.VarChar(255)
}

enum DayOfTheWeek {
  sunday
  monday
  tuesday
  wednesday
  thursday
  friday
  saturday
}

model unavailableTime {
  id              String       @id @default(uuid()) @db.Uuid
  dayOfTheWeek    DayOfTheWeek
  startTime       DateTime     @db.Timestamptz(6)
  endTime         DateTime     @db.Timestamptz(6)
  singleOccurency DateTime     @db.Timestamptz(6)
  court           Court        @relation(fields: [courtId], references: [id])
  created_at      DateTime     @default(now()) @db.Timestamptz(6)
  courtId         String       @db.Uuid
}

model CourtHasSports {
  court      Court     @relation(fields: [court_id], references: [id])
  court_id   String    @unique @db.Uuid
  active     Boolean   @default(true) @db.Boolean
  created_at DateTime  @default(now()) @db.Timestamptz(6)
  updated_at DateTime? @db.Timestamptz(6)
  sport      Sport?    @relation(fields: [sportsId], references: [id])
  sportsId   String?   @db.Uuid

  @@id([court_id])
  @@map("court_has_sports")
}

model ReservationHasUsers {
  reservation    Reservation @relation(fields: [reservation_id], references: [id])
  reservation_id String      @db.Uuid
  user           User        @relation(fields: [user_id], references: [id])
  user_id        String      @db.Uuid
  created_at     DateTime    @default(now()) @db.Timestamptz(6)

  @@id([reservation_id, user_id])
  @@map("reservation_has_users")
}

model ReservationHasRequestedUsers {
  reservation    Reservation @relation(fields: [reservation_id], references: [id])
  reservation_id String      @db.Uuid
  user           User        @relation(fields: [user_id], references: [id])
  user_id        String      @db.Uuid
  created_at     DateTime    @default(now()) @db.Timestamptz(6)

  @@id([reservation_id, user_id])
  @@map("reservation_has_requested_users")
}
